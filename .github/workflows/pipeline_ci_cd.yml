name: ci

on:
  push:
    branches:
      - ayoun

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: php:8.2-apache
    steps:
      - name: checkout du code
        uses: actions/checkout@v3

      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php
          mv composer.phar /usr/local/bin/composer

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

  PHPUnit:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # Spécifiez la version PHP que vous utilisez
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Prepare for PHPUnit
        run: |
          chmod -R 755 vendor
          chmod +x vendor/bin/phpunit

      - name: Run PHPUnit tests
        run: php ./vendor/bin/phpunit

  docker:
    runs-on: ubuntu-latest
    needs:
      - test
      - PHPUnit
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/ayoun07/ci-cd:latest
        
      # - name: Envoi de notification à Google Chat
      #   run: |
      #     response=$(curl -s -w "\n%{http_code}" -X POST -H "Content-Type: application/json" -d '{
      #     "text": "Une nouvelle version a été déployée sur `ayoun` !"
      #     }' "https://chat.googleapis.com/v1/spaces/AAAAbk_h9Ic/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=45z-u4OTa1tsHft-HJzUvjcaDyTf4k70Dj3FFjOVnFs")
      #     body=$(echo "$response" | sed -e '$d')
      #     status=$(echo "$response" | tail -n1)
      #     echo "Statut de la réponse : $status"
      #     echo "Corps de la réponse : $body"
      #     if [ "$status" != "200" ]; then
      #       echo "Erreur lors de l'envoi de la notification."
      #       exit 1
      #     fi

      - name: Notify Google Chat
        uses: SimonScholz/google-chat-action@main
        with:
          webhookUrl: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          jobStatus: ${{ job.status }}
          message: "Une nouvelle version a été déployée sur `ayoun` ! "
          title: "Déploiement réussi"
          subtitle: "Image Docker poussée vers ghcr.io Commit: ${{ github.sha }}"