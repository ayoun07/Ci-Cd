name: ci

on:
  push:
    branches:
      - ayoun

  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: php:8.2-apache
    steps:
      - name: checkout du code
        uses: actions/checkout@v3

      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php
          mv composer.phar /usr/local/bin/composer

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

  PHPUnit:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # Spécifiez la version PHP que vous utilisez
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Prepare for PHPUnit
        run: |
          chmod -R 755 vendor
          chmod +x vendor/bin/phpunit

      - name: Run PHPUnit tests
        run: php ./vendor/bin/phpunit

  Docker:
    runs-on: ubuntu-latest
    needs:
      - test
      - PHPUnit
    if: success()
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/ayoun07/ci-cd:latest

  # Googletchat:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test
  #     - PHPUnit
  #     - Docker
  #   if: success()
  #   if: always()
  #   steps:
  #     - name: Notify Google Chat
  #       uses: SimonScholz/google-chat-action@main
  #       with:
  #         webhookUrl: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
  #         jobStatus: ${{ job.status }}
  #         message: "Le job de test s'est terminé avec le statut : ${{ job.status }} pour le commit ${{ github.sha }}."
  #         title: "Statut du job de test"
  #         subtitle: "Image Docker poussée vers ghcr.io || Commit responsable: ${{ github.sha }}"
  Googletchat:
    runs-on: ubuntu-latest
    needs:
      - test
      - PHPUnit
      - Docker
    if: always() # Toujours exécuter ce job
    steps:
      - name: Notify Google Chat
        uses: SimonScholz/google-chat-action@main
        with:
          webhookUrl: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          jobStatus: >
            ${{ needs.test.result == 'success' && 
                needs.PHPUnit.result == 'success' && 
                needs.Docker.result == 'success'}}
          message: >
            Le job de test s'est terminé avec le statut :
            ${{ needs.test.result == 'success' && 
                needs.PHPUnit.result == 'success' && 
                needs.Docker.result == 'success'}} 
            pour le commit ${{ github.sha }}.
          title: "Statut du job de test"
          subtitle: >
            Image Docker poussée vers ghcr.io || Commit responsable: ${{ github.sha }}.
